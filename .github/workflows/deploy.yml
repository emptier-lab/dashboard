name: Deploy to GitHub Pages
# Retry deployment - fixed API key and asset paths

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Clean dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Build
        run: npm run build:rocks

      - name: Create directory structure for /tv/
        run: |
          mkdir -p deploy/tv
          cp -r dist/* deploy/tv/

          # Copy configuration files
          cp .htaccess deploy/ 2>/dev/null || true
          cp _redirects deploy/ 2>/dev/null || true
          cp vercel.json deploy/ 2>/dev/null || true

          # Create root index.html redirect with HTTPS support
          cat > deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta http-equiv="refresh" content="0; url=/tv/">
            <script>
              if (window.location.protocol === 'http:' && window.location.hostname === 'empty.rocks') {
                window.location.replace('https://empty.rocks/tv/');
              } else {
                window.location.replace('/tv/');
              }
            </script>
          </head>
          <body>Redirecting to <a href="/tv/">empty.tv</a>...</body>
          </html>
          EOF

          # Create empty.tv redirect directory
          mkdir -p deploy/empty.tv
          cat > deploy/empty.tv/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta http-equiv="refresh" content="0; url=/tv/">
            <script>
              if (window.location.protocol === 'http:' && window.location.hostname === 'empty.rocks') {
                window.location.replace('https://empty.rocks/tv/');
              } else {
                window.location.replace('/tv/');
              }
            </script>
          </head>
          <body>Redirecting to <a href="/tv/">empty.tv</a>...</body>
          </html>
          EOF

          # Create empty.tv/tv redirect directory
          mkdir -p deploy/empty.tv/tv
          cat > deploy/empty.tv/tv/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta http-equiv="refresh" content="0; url=/tv/">
            <script>
              if (window.location.protocol === 'http:' && window.location.hostname === 'empty.rocks') {
                window.location.replace('https://empty.rocks/tv/');
              } else {
                window.location.replace('/tv/');
              }
            </script>
          </head>
          <body>Redirecting to <a href="/tv/">empty.tv</a>...</body>
          </html>
          EOF

          # Copy .htaccess to /tv/ directory for SPA routing
          cp .htaccess deploy/tv/ 2>/dev/null || true

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./deploy"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false
